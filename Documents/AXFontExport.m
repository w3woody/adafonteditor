//
//  AXFontExport.m
//  AdaFontEditor
//
//  Created by William Woody on 6/26/18.
//  Copyright Â© 2018 Glenview Software. All rights reserved.
//

#import "AXFontExport.h"
#import "AXDocument.h"

@interface AXFontExport ()
{
	NSString *fileName;
	NSString *fontName;
	FILE *file;
	AXDocument *doc;
}
@end

@implementation AXFontExport

- (instancetype)initWithDocument:(AXDocument *)d url:(NSURL *)url
{
	if (nil != (self = [super init])) {
		char buffer[256];
		int fontRef = 0;

		doc = d;

		fileName = [url lastPathComponent];
		NSInteger i,len = fileName.length;
		for (i = 0; i < len; ++i) {
			unichar ch = [fileName characterAtIndex:i];
			if (ch == '.') break;

			if (!isalnum(ch) && (ch != '_')) continue;
			buffer[fontRef++] = (char)ch;
			if (fontRef >= 255) break;
		}
		if (fontRef == 0) {
			strcpy(buffer,"font");
		} else {
			buffer[fontRef] = 0;
		}
		fontName = [NSString stringWithUTF8String:buffer];

		const char *fname = [url fileSystemRepresentation];
		file = fopen(fname,"w");
		if (file == nil) return nil;
	}
	return self;
}

- (void)dealloc
{
	if (file) fclose(file);
}

- (void)export
{
	/*
	 *	Print a standard header.
	 */

	fprintf(file,"/*  %s\n",fileName.UTF8String);
	fprintf(file," *\n");
	fprintf(file," *      %s automatically generated by AdaFontEditor\n",fontName.UTF8String);
	fprintf(file," */\n");
	fprintf(file,"\n");
	fprintf(file,"#include <Adafruit_GFX.h>\n");
	fprintf(file,"\n\n");

	/*
	 *	Construct the bitmap data
	 */

	uint8_t pos = 0;
	BOOL first = YES;
	fprintf(file, "const uint8_t %s_bitmap[] PROGMEM = {\n",fontName.UTF8String);

	for (uint16_t ch = doc.first; ch <= doc.last; ++ch) {
		AXCharacter *c = [doc characterAtIndex:ch];
		const uint8_t *data = [c rawBitmap];
		uint16_t len = [c rawBitmapSize];
		for (uint16_t i = 0; i < len; ++i) {
			uint8_t byte = *data++;

			// hack to flip bits in byte
			byte = ((byte & 0x55) << 1) | ((byte & 0xAA) >> 1);
			byte = ((byte & 0x33) << 2) | ((byte & 0xCC) >> 2);
			byte = ((byte & 0x0F) << 4) | ((byte & 0xF0) >> 4);

			if (first) {
				fprintf(file,"    ");
				first = NO;
			} else {
				if (pos > 7) {
					pos = 0;
					fprintf(file,",\n    ");
				} else {
					fprintf(file,", ");
				}
			}

			fprintf(file,"0x%02X",byte);
			++pos;
		}
	}

	fprintf(file, "\n};\n\n");

	/*
	 *	Now construct the internal structures.
	 */

	fprintf(file,"const GFXglyph %s_glyphs[] PROGMEM = {\n",fontName.UTF8String);

	uint16_t offset = 0;
	first = YES;
	for (uint16_t ch = doc.first; ch <= doc.last; ++ch) {
		AXCharacter *c = [doc characterAtIndex:ch];
		if (first) {
			fprintf(file,"    ");
			first = NO;
		} else {
			fprintf(file,",\n    ");
		}
		fprintf(file,"{ %5d, %3d, %3d, %3d, %3d, %3d }",offset,c.width,c.height,c.xAdvance,c.xOffset,-c.yOffset);

		offset += c.rawBitmapSize;
	}

	fprintf(file,"\n};\n\n");

	/*
	 *	Print the font record
	 */

	fprintf(file,"const GFXfont %s PROGMEM = {\n",fontName.UTF8String);
	fprintf(file,"    %s_bitmap,\n",fontName.UTF8String);
	fprintf(file,"    %s_glyphs,\n",fontName.UTF8String);
	fprintf(file,"    %d,\n",doc.first);
	fprintf(file,"    %d,\n",doc.last);
	fprintf(file,"    %d\n",doc.yHeight);
	fprintf(file,"};\n");
}

@end
